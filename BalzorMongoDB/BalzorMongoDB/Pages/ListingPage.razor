@page "/UpdateListing"
@using Radzen.Blazor
@using BalzorMongoDB.Data
@inject BalzorMongoDB.IService.IListing listingService
@inject BalzorMongoDB.IService.IHomeOwner homeOwnerService

@*page title*@
<h3>Update Home Listings</h3>
<br />
<br />

<div class="col-md-12">
	@*hidding table unless one to edit is selected*@
	<div class="h-100 p-3 bg-white border rounded" hidden ="@isHidden">
		<div class="row">
			@*user edits to update table*@
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Sold To</label>
					<input type="text" class="form-control" @bind="listing.soldTo" style="width:100%;" placeholder="null" />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">First Name</label>
					<input type="text" class="form-control" @bind="homeOwner.firstName" style="width:100%;" />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Last Name</label>
					<input type="text" class="form-control" @bind="homeOwner.lastName" style="width:100%;"  />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Dependents</label>
					<input type="number" min="0" class="form-control" @bind="homeOwner.dependents" style="width:100%;" />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Income/year</label>
					<input type="number" min="0" class="form-control" @bind="homeOwner.income" style="width:100%;"  />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Age</label>
					<input type="number" min="0" class="form-control" @bind="homeOwner.age" style="width:100%;"  />
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-3">
					<label class="form-label fw-bold">Profession</label>
					<input type="text" class="form-control" @bind="homeOwner.profession" style="width:100%;"  />
				</div>
			</div>
		</div>
		<br/>
		<br/>

		<div class="row">
			<div class="col-md-2">
				<div class="md-2">
					@*save updates*@
					<label class="form-label fw-bold">&nbsp;&nbsp;&nbsp;</label>
					<button class="form-control btn btn-success btn-sm fw-bold" style="margin-top:4px;font-size:14px;" @onclick="@(e=> Save())">Save</button>
				</div>
			</div>
			<div class="col-md-2">
				<div class="md-2">
					@*reset values*@
					<label class="form-label fw-bold">&nbsp;&nbsp;&nbsp;</label>
					<button class="form-control btn btn-success btn-sm fw-bold" style="margin-top:4px;font-size:14px;" @onclick="@(e=> Reset())">Reset</button>
				</div>
			</div>
		</div>
	</div>
</div>

<br />
<br />
<br/>

<h5>Listings Table</h5>
<div class="row">
	@*displaying listings table*@
	<div class="col-md-12">
		<table class="table table-striped table-bordered">
			<thead>
				<tr>
					<th>Owner ID</th>
					<th>Employee ID</th>
					<th>Home ID</th>
					<th>Available Start Date</th>
					<th>Available End Date</th>
					<th>Listing Price</th>
					<th>Is Sold</th>
					<th>Sold To</th>
				</tr>
			</thead>
			<tbody>
				@if (Listings.Count() > 0)
				{
					@foreach (var i in Listings)
					{
						<tr>
							<td>@i.ownerID</td>
							<td>@i.employeeID</td>
							<td>@i.homeID</td>
							<td>@i.availableStartDate</td>
							<td>@i.availableEndDate</td>
							<td>@i.listingPrice</td>
							<td>@i.isSold</td>
							<td>@i.soldTo</td>
							<td>
								@*making editing avalible only for houses that are not sold*@
								@if(@i.isSold == false)
								{
								<button class="btn btn-primary" @onclick="@(e=> EditListing(@i._id))">Edit</button>
								}
							</td>
						</tr>
					}
				}
			</tbody>
		</table>
	</div>
</div>

<br />
<br />
<br />
@*adding home owner table*@
<h5>Home Owner Table</h5>

<RadzenDataGrid Data="@HomeOwners" TItem="HomeOwner" AllowSorting="true" AllowColumnReorder="true" AllowColumnPicking="true"
				AllowMultiColumnSorting="true" AllowFiltering="true">
	<Columns>
		<RadzenDataGridColumn TItem="HomeOwner" Property="SSN" Title="SSN" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="homeID" Title="Home ID" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="firstName" Title="First Name" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="lastName" Title="Last Name" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="dependents" Title="Dependents" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="income" Title="Income" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="age" Title="Age" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="profession" Title="Proffession" />
		<RadzenDataGridColumn TItem="HomeOwner" Property="isCurrentOwner" Title="Current Owner" />
	</Columns>
</RadzenDataGrid>


@code {
	public int homeIDVal { get; set; } = 0;
	public string SSNVal { get; set; } = "";
	public bool isHidden { get; set; } = true;

	//creating instance of table classes
	protected override async Task OnInitializedAsync()
	{
		GetListings();
		GetHomeOwners();

	}

	//updating tables
	private void Save()
	{
		//setting listings home id and homeOwner homeID to the same value
		homeIDVal = listing.homeID;
		homeOwner.homeID = homeIDVal; 

		//setting sold to and SSN to the same value
		SSNVal = listing.soldTo;
		homeOwner.SSN = SSNVal;
		homeOwner.isCurrentOwner = true;
		SaveListing();
		SaveHomeOwner();

		// hidding editing entries unitl selected again from listings table
		isHidden = true;
	}

	//resetting values
	private void Reset()
	{
		ResetHomeOwner();
		ResetListing();
	}

}


@code {
	// creating listings class instance
	Listing listing = new Listing();
	List<Listing> Listings = new List<Listing>();

	// getting table values
	private void GetListings()
	{
		Listings = listingService.GetListings();
	}

	public string checkSoldTo { get; set; } = "";
	public bool checkIsSold { get; set; } = false;

	// updating listings table
	private void SaveListing()
	{
		// changing isSold value to a bool
		checkSoldTo = listing.soldTo;
		if (checkSoldTo != null)
		{
			listing.isSold = true;
		}
		else
		{
			listing.isSold = false;
		}
		listingService.SaveOrUpdate(listing);
		ResetListing();
		GetListings();
	}

	//resetting values
	private void ResetListing()
	{
		listing = new Listing();
	}

	//allowing single listing entry to be edited in table
	private void EditListing(string listingId)
	{
		listing = listingService.GetListing(listingId);
		isHidden = false;
	}

}

@code {
	// creating instance of home owner class
	HomeOwner homeOwner = new HomeOwner();
	List<HomeOwner> HomeOwners = new List<HomeOwner>();


	//getting home owner table 
	private void GetHomeOwners()
	{
		HomeOwners = homeOwnerService.GetHomeOwners();
	}

	//saving updates made from user entries
	private void SaveHomeOwner()
	{
		homeOwnerService.SaveOrUpdate(homeOwner);
		ResetHomeOwner();
		GetHomeOwners();
	}

	//reseting values to original (before update saved)
	private void ResetHomeOwner()
	{
		homeOwner = new HomeOwner();
	}

}